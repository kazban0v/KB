import os
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from config import API_ID, API_HASH, BOT_TOKEN
from yt_dlp import YoutubeDL
import eyed3
from database import init_db, add_user, add_download_to_history

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Client("youtube_mp3_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ MP3 —Ç–µ–≥–æ–≤
def set_mp3_tags(file_path, title, artist):
    try:
        audiofile = eyed3.load(file_path)
        if audiofile:
            audiofile.tag.clear()
            audiofile.tag.artist = artist
            audiofile.tag.title = title
            audiofile.tag.save(version=eyed3.id3.ID3_V2_3)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ç–µ–≥–æ–≤: {e}")

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.on_message(filters.command("start"))
async def start_handler(client, message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    add_user(user_id, username, first_name)

    keyboard = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")],
            [InlineKeyboardButton("üì• –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", callback_data="how_to_use")],
        ]
    )

    await message.reply(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}!\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Å–∫–∞—á–∞—Ç—å –º—É–∑—ã–∫—É —Å YouTube –∏ –º–µ–Ω—è—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ!\n\n"
        "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ.",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
@bot.on_callback_query(filters.regex("about"))
async def about_handler(client, callback_query: CallbackQuery):
    await callback_query.message.edit(
        "‚ÑπÔ∏è **–û –±–æ—Ç–µ**\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ –Ω–∞ YouTube –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP3. "
        "–ú–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —ç—Ç–æ–º –±–æ—Ç–µ."
        "–°–¥–µ–ª–∞–Ω–æ –±–æ—Ç–æ–º [SoundsBot_KB](https://t.me/SoundsBot_KB)."
    )

@bot.on_callback_query(filters.regex("how_to_use"))
async def how_to_use_handler(client, callback_query: CallbackQuery):
    await callback_query.message.edit(
        "üì• **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞**\n\n"
        "1. –ù–∞–π–¥–∏ –≤–∏–¥–µ–æ –Ω–∞ YouTube.\n"
        "2. –°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –Ω–∞ —ç—Ç–æ –≤–∏–¥–µ–æ.\n"
        "3. –û—Ç–ø—Ä–∞–≤—å –µ—ë –º–Ω–µ –≤ —á–∞—Ç.\n"
        "4. –Ø –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤–∏–¥–µ–æ –≤ MP3 –∏ –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —Ñ–∞–π–ª!\n\n"
        "–°–¥–µ–ª–∞–Ω–æ –±–æ—Ç–æ–º [SoundsBot_KB](https://t.me/SoundsBot_KB)."
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ YouTube
@bot.on_message(filters.regex(r"https?://(www\.)?(youtube\.com|youtu\.be)/.+"))
async def youtube_handler(client, message: Message):
    url = message.text
    user_id = message.from_user.id
    
    try:
        with YoutubeDL({"quiet": True, "noplaylist": True}) as ydl:
            info = ydl.extract_info(url, download=False)
            duration = info.get("duration", 0)
            title = info.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤–∏–¥–µ–æ")
            uploader = info.get("uploader", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä")

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        max_duration = 7200  # –ú–∞–∫—Å–∏–º—É–º 2 —á–∞—Å–∞
        if duration > max_duration:
            await message.reply(
                f"‚ùå –í–∏–¥–µ–æ **{title}** —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({duration // 60} –º–∏–Ω—É—Ç). "
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ ‚Äî {max_duration // 60} –º–∏–Ω—É—Ç."
            )
            return

        await message.reply("üîÑ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...")

        ydl_opts = {
            "format": "bestaudio/best",
            "postprocessors": [{
                "key": "FFmpegExtractAudio",
                "preferredcodec": "mp3",
                "preferredquality": "192",
            }],
            "outtmpl": f"downloads/{user_id}_%(title)s.%(ext)s",
        }

        with YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
            file_name = ydl.prepare_filename(info).replace(".webm", ".mp3").replace(".mp4", ".mp3")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        add_download_to_history(user_id, title, url, file_name)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏
        user_states[user_id] = {
            "file_name": file_name,
            "title": title,
            "artist": uploader,
            "stage": "waiting_for_metadata"
        }

        # –ö–Ω–æ–ø–∫–∏ "–î–∞/–ù–µ—Ç"
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("–î–∞", callback_data="yes_metadata"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="no_metadata")
        ]])

        await message.reply(
            f"üéµ **{title}**\nüë§ {uploader}\n\n–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞?",
            reply_markup=keyboard
        )

    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–î–∞/–ù–µ—Ç" –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
@bot.on_callback_query(filters.regex("yes_metadata"))
async def yes_metadata_handler(client, callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    user_states[user_id]["stage"] = "waiting_for_new_title"
    
    await callback_query.message.edit(
        "üìù –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏:"
    )

@bot.on_callback_query(filters.regex("no_metadata"))
async def no_metadata_handler(client, callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    state = user_states[user_id]
    
    set_mp3_tags(state["file_name"], state["title"], state["artist"])
    await callback_query.message.edit("‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")

    await callback_query.message.reply_document(
        document=state["file_name"],
        caption=f"üéµ **{state['title']}**\nüë§ {state['artist']}\n\n–°–æ–∑–¥–∞–Ω–æ –±–æ—Ç–æ–º [SoundsBot_KB](https://t.me/SoundsBot_KB)"
    )

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    os.remove(state["file_name"])

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    del user_states[user_id]

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
@bot.on_message(filters.text)
async def metadata_handler(client, message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_states:
        return

    state = user_states[user_id]

    # –ï—Å–ª–∏ –≤ —Å—Ç–∞–¥–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
    if state["stage"] == "waiting_for_new_title":
        state["title"] = message.text
        await message.reply("üë§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞:")
        state["stage"] = "waiting_for_new_artist"

    # –ï—Å–ª–∏ –≤ —Å—Ç–∞–¥–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞
    elif state["stage"] == "waiting_for_new_artist":
        state["artist"] = message.text
        set_mp3_tags(state["file_name"], state["title"], state["artist"])

        await message.reply_document(
            document=state["file_name"],
            caption=f"üéµ **{state['title']}**\nüë§ {state['artist']}\n\n–°–æ–∑–¥–∞–Ω–æ –±–æ—Ç–æ–º [SoundsBot_KB](https://t.me/SoundsBot_KB)"
        )

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        os.remove(state["file_name"])

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        del user_states[user_id]

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.run()